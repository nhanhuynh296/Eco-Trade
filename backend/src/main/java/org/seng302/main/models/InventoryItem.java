package org.seng302.main.models;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

import javax.persistence.*;
import java.time.LocalDate;

/**
 * The class Inventory Item. Creates a table of the same name with attributes as columns.
 */
@JsonIgnoreProperties({"hibernateLazyInitializer"})
@NoArgsConstructor // generate a no-args constructor needed by JPA (lombok pre-processor)
@ToString // generate a toString method
@Entity // declare this class as a JPA entity (that can be mapped to a SQL table)
@Table(name = "inventory_item")
public class InventoryItem {

    @Id // this field (attribute) is the table primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // autoincrement the ID
    @Column(name = "inventory_id")
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @OnDelete(action = OnDeleteAction.CASCADE)
    @JoinColumn(name = "product_id", nullable = false)
    private Product product;

    @Column(name = "quantity", nullable = false)
    private Integer quantity;

    @Column(name = "price_per_item")
    private Double pricePerItem;

    @Column(name = "total_price")
    private Double totalPrice;

    @Column(name = "manufactured")
    private LocalDate manufactured;

    @Column(name = "sell_by")
    private LocalDate sellBy;

    @Column(name = "best_before")
    private LocalDate bestBefore;

    @Column(name = "expires", nullable = false)
    private LocalDate expires;

    /**
     * Inventory item constructor
     *
     * @param product Product Code of corresponding product in business's catalogue.
     * @param quantity How many items of stock are present
     * @param pricePerItem Price to purchase a single item of the product
     * @param totalPrice Price for purchasing the entire stock of the product
     * @param manufactured The date on which the product was prepared / manufactured
     * @param sellBy The date by which the product ought to be sold
     * @param bestBefore The "best before" date of the product
     * @param expires The expiry date of the product
     */
    public InventoryItem(
            Product product,
            Integer quantity,
            Double pricePerItem,
            Double totalPrice,
            LocalDate manufactured,
            LocalDate sellBy,
            LocalDate bestBefore,
            LocalDate expires
    ) {
        this.product = product;
        this.quantity = quantity;
        this.pricePerItem = pricePerItem;
        this.totalPrice = totalPrice;
        this.manufactured = manufactured;
        this.sellBy = sellBy;
        this.bestBefore = bestBefore;
        this.expires = expires;
    }

    // Getters ---------------------------------------------------------------------------------------------------------

    /**
     * @return A unique (within the inventory) identifer for this item - autogenerated by the system
     */
    public Product getProduct() {
        return product;
    }

    /**
     * @return Product Code of corresponding product in business's catalogue.
     */
    public Long getId() {
        return id;
    }

    /**
     * @return How many items of stock are present
     */
    public Integer getQuantity() {
        return quantity;
    }

    /**
     * @return Price to purchase a single item of the product
     */
    public Double getPricePerItem() {
        return pricePerItem;
    }

    /**
     * @return Price for purchasing the entire stock of the product
     */
    public Double getTotalPrice() {
        return totalPrice;
    }

    /**
     * @return The date on which the product was prepared / manufactured
     */
    public LocalDate getManufactured() {
        return manufactured;
    }

    /**
     * @return The date by which the product ought to be sold
     */
    public LocalDate getSellBy() {
        return sellBy;
    }

    /**
     * @return The "best before" date of the product
     */
    public LocalDate getBestBefore() {
        return bestBefore;
    }

    /**
     * @return The expiry date of the product
     */
    public LocalDate getExpires() {
        return expires;
    }

    // Setters ---------------------------------------------------------------------------------------------------------

    /**
     * @param id - A unique (within the inventory) identifer for this item - autogenerated by the
     *           system
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * @param product - Product Code of corresponding product in business's catalogue.
     */
    public void setProduct(Product product) {
        this.product = product;
    }

    /**
     * @param quantity - How many items of stock are present
     */
    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    /**
     * @param pricePerItem - Price to purchase a single item of the product
     */
    public void setPricePerItem(Double pricePerItem) {
        this.pricePerItem = pricePerItem;
    }

    /**
     * @param totalPrice - Price for purchasing the entire stock of the product
     */
    public void setTotalPrice(Double totalPrice) {
        this.totalPrice = totalPrice;
    }

    /**
     * @param manufactured - The date on which the product was prepared / manufactured
     */
    public void setManufactured(LocalDate manufactured) {
        this.manufactured = manufactured;
    }

    /**
     * @param sellBy - The date by which the product ought to be sold
     */
    public void setSellBy(LocalDate sellBy) {
        this.sellBy = sellBy;
    }

    /**
     * @param bestBefore - The "best before" date of the product
     */
    public void setBestBefore(LocalDate bestBefore) {
        this.bestBefore = bestBefore;
    }

    /**
     * @param expires - The expiry date of the product
     */
    public void setExpires(LocalDate expires) {
        this.expires = expires;
    }

}
